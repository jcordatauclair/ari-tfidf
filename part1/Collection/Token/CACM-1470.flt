the
structure
of
programming
languages
the
following
are
identified
as
major
components
of
every
programming
language
the
elementary
program
statement
mechanisms
for
linking
elementary
statements
together
the
means
by
which
program
can
obtain
data
inputs
several
alternative
forms
of
each
of
these
components
are
described
compared
and
evaluated
many
examples
frequently
from
list
processing
languages
illustrate
the
forms
described
elementary
program
statements
usually
take
the
form
of
commands
requirements
or
implicit
specifications
command
is
an
imperative
statement
that
commands
the
action
to
be
taken
requirement
describes
the
effect
to
be
achieved
without
saying
anything
about
the
actions
to
be
taken
an
implicit
specification
is
similar
to
requirement
but
the
programmer
must
understand
what
actions
will
be
taken
to
achieve
the
desired
effect
subroutines
may
be
entered
explicitly
by
execute
call
or
by
function
composition
explicitly
called
subroutines
generally
require
special
linkage
conventions
an
execute
subroutine
call
is
syntactically
indistinguishable
from
basic
instruction
of
the
programming
language
function
composition
is
convenient
alternative
to
the
explicit
call
the
three
principal
ways
of
getting
inputs
for
routines
are
by
referring
to
the
data
itself
by
referring
to
the
data
by
name
and
by
referring
to
it
implicitly
by
means
of
variables
or
functions
names
are
useful
entry
points
into
permanent
data
structures
but
can
be
error-causing
distractions
in
other
contexts
the
author
discusses
advantages
disadvantages
and
factors
influencing
the
choice
of
form
of
component
for
language
he
concludes
by
suggesting
the
evolution
of
programming
languages
toward
one
which
will
permit
all
the
most
convenient
ways
of
structuring
programs
organizing
systems
and
referencing
data
cacm
march
raphael
