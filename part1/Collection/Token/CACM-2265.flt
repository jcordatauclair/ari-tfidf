model
for
type
checking
most
current
programming
languages
treat
computation
over
different
classes
of
objects
numbers
strings
labels
and
functions
for
correct
compilation
and
execution
the
following
question
then
arises
is
program
properly
constructed
so
that
its
operations
and
operands
are
compatible
the
activity
of
answering
this
question
is
usually
called
type
checking
this
paper
attempts
to
isolate
the
notion
of
type
checking
and
presents
partial
solution
to
the
type
checking
problem
based
on
the
notions
of
abstraction
and
application
of
functions
in
particular
program
is
mapped
into
an
expression
within
decidable
subset
of
the
lambda
calculus
which
characterizes
the
type
relations
within
the
program
and
eliminates
all
other
information
the
determination
of
the
type-wise
correctness
or
incorrectness
of
the
program
is
resolved
by
reducing
its
corresponding
lambda
calculus
expression
to
one
of
two
normal
forms
the
constant
correct
for
type-wise
correct
program
or
the
constant
error
an
application
to
type
checking
in
algol
is
made
and
the
attendant
problems
faced
for
any
notion
of
type
checking
are
discussed
cacm
november
ledgard
